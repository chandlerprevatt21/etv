# Generated by Django 3.2.8 on 2021-10-31 10:21

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import phone_field.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('donations', '0001_initial'),
        ('addresses', '0001_initial'),
        ('billing', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Donor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer_id', models.CharField(blank=True, max_length=270, null=True)),
                ('email', models.EmailField(max_length=254)),
                ('active', models.BooleanField(default=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('donor_id', models.CharField(blank=True, max_length=120, null=True)),
                ('first_name', models.CharField(blank=True, max_length=120, null=True)),
                ('last_name', models.CharField(blank=True, max_length=120, null=True)),
                ('phone', phone_field.models.PhoneField(blank=True, max_length=31, null=True)),
                ('donor_level', models.CharField(blank=True, choices=[('25', 'Village Member'), ('50', 'Village Patron'), ('100', 'Village Supporter'), ('500', 'Village Leader'), ('1000', 'Village Ambassador'), ('5000', "Founder's Circle - Bronze"), ('10000', "Founder's Circle - Silver"), ('15000', "Founder's Circle - Gold"), ('25000', "Founder's Circle - Platinum")], max_length=270, null=True)),
                ('category', models.CharField(blank=True, choices=[('beauty', 'Beauty & Personal Grooming'), ('books', 'Books & Publishing'), ('cars', 'Cars & Automotive'), ('child', "Childcare | Children's Services & Products"), ('cleaning', 'Cleaning'), ('clothing', 'Clothing & Fashion'), ('construction', 'Construction & Trades'), ('education', 'Education'), ('eldercare', 'Eldercare'), ('electronics', 'Electronics & Technology'), ('entertainment', 'Entertainment'), ('farming', 'Farming & Agriculture'), ('florists', 'Florists'), ('grocery', 'Grocery & Food Services'), ('health', 'Health & Wellness'), ('home', 'Home & Garden'), ('hotels', 'Hotels & Hospitality | Travel'), ('jewelry', 'Jewelry & Accessories'), ('legal', 'Legal & Financial Services'), ('lifestyle', 'Lifestyle'), ('marketing', 'Marketing & Advertising'), ('medical', 'Medical Services'), ('packaging', 'Packaging | Delivery | Shipping'), ('pets', 'Pets & Animal Care'), ('photography', 'Photography & Video'), ('professional', 'Professional Services'), ('real estate', 'Real Estate'), ('recreation', 'Recreation & Sports'), ('restaurants', 'Restaurants & Bars | Event Spaces'), ('security', 'Security Services'), ('transportation', 'Transportation & Trucking'), ('visual', 'Visual & Performing Arts | Culture'), ('other', 'Other')], max_length=270, null=True)),
                ('cards', models.ManyToManyField(blank=True, to='billing.Card')),
                ('default_mailing_address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='default_mailing_address', to='addresses.address')),
                ('donations', models.ManyToManyField(blank=True, to='donations.donation')),
                ('mailing_addresses', models.ManyToManyField(blank=True, related_name='mailing_address', to='addresses.Address')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='List',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=270, unique=True)),
                ('donors', models.ManyToManyField(to='donors.Donor')),
            ],
        ),
    ]
